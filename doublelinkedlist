public class doublelinked_ex {

Node head;
Node tail;

class Node{
int data;
Node next;
Node prev;

Node(int val)
{
data=val;
next=null;
prev=null;
}

}
public void DoubleLinked_ex() {
head=null;
}
public void insertAtBegin(int val) {
Node newNode=new Node(val);
if(head==null) {
head=newNode;
}
else {
Node temp=head;
newNode.next=temp;
head=newNode;

}
}
public void display() {
Node temp=head;
while(temp!=null) {
System.out.print(temp.data+" ");
temp=temp.next;
}
}
public void displayUsingPrev() {
Node temp=tail;
while(temp!=null) {
System.out.println(temp.data+" ");
temp=temp.prev;
}
}
public void insertAtAnyPos(int pos,int val) {
Node newNode=new Node(val);
Node temp=head;
for(int i=0;i<pos-1;i++){
temp=temp.next;
}
newNode.next=temp.next;
temp.next=newNode;
}
public void viewposition(int mypos) {
Node temp=head;
System.out.println("head value "+temp.data);
for(int i=0;i<mypos-1;i++) {
temp=temp.next;
}
System.out.println("Current Position Value"+temp.data);
}
 
public void deleteAtPosition(int delpos) {
Node temp=head;
Node dtemp=null;
for(int i=0;i<delpos-1;i++) {
dtemp=temp;
temp=temp.next;
}
dtemp.next=temp.next;
}
public void deleteAtBegin()
{
head=head.next;
}
public void DoubleinsertBegin(int val) {
Node newNode=new Node(val);
if(head==null) {
head=newNode;
tail=newNode;
}
else {
Node temp=head;
newNode.next=temp;
head=newNode;
temp.prev=newNode;
}


}
public void DoubleinsertAtAnyPos(int pos,int val) {
Node newNode=new Node(val);
Node temp=head;
Node temp1=head;
for(int i=1;1<pos-1;i++) {
temp=temp.next;
temp1=temp1.next;

}
newNode.next=temp.next;

temp.next=newNode;
newNode.prev=temp;

}




}

public class doublelinked {
public static void main(String[]arge) {

doublelinked_ex l=new doublelinked_ex();


l.DoubleinsertBegin(90);
l.DoubleinsertBegin(777);
l.DoubleinsertBegin(22);
l.DoubleinsertBegin(900);
l.DoubleinsertBegin(12);
l.DoubleinsertBegin(55);
l.display();
System.out.println();
l.displayUsingPrev();
l.DoubleinsertAtAnyPos(4, 333);
l.display();
}
}
